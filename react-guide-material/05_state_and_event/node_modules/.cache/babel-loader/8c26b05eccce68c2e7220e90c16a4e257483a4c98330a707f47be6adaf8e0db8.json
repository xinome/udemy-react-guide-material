{"ast":null,"code":"var _jsxFileName = \"/Users/ikomasatoru/Desktop/workspace/udemy/react-complete-guide/react-guide-material/05_state_and_event/src/050_prev_state/end/Example.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\n\n/* \r\nPOINT stateの更新は予約される（すぐには更新されない。）\r\nPOINT 更新予定のstateの値の取得方法\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Example = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const countUp = () => {\n    setCount(count + 1);\n    setCount((prevstate /* 現在のstateの値 */) => {\n      return prevstate + 1; /* 次のstateの値 */\n    });\n\n    console.log(count);\n  };\n  const countDown = () => {\n    setCount(count - 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u73FE\\u5728\\u306E\\u30AB\\u30A6\\u30F3\\u30C8\\u6570: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: countUp,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: countDown,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Example, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n_c = Example;\nexport default Example;\nvar _c;\n$RefreshReg$(_c, \"Example\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Example","_s","count","setCount","countUp","prevstate","console","log","countDown","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/ikomasatoru/Desktop/workspace/udemy/react-complete-guide/react-guide-material/05_state_and_event/src/050_prev_state/end/Example.js"],"sourcesContent":["import { useState } from \"react\";\r\n\r\n/* \r\nPOINT stateの更新は予約される（すぐには更新されない。）\r\nPOINT 更新予定のstateの値の取得方法\r\n*/\r\nconst Example = () => {\r\n  const [count, setCount] = useState(0);\r\n  const countUp = () => {\r\n    setCount(count + 1);\r\n    setCount(prevstate /* 現在のstateの値 */ => {\r\n      return prevstate + 1; /* 次のstateの値 */\r\n    } );\r\n    console.log(count);\r\n  };\r\n  const countDown = () => {\r\n    setCount(count - 1);\r\n  };\r\n  return (\r\n    <>\r\n      <p>現在のカウント数: {count}</p>\r\n      <button\r\n        onClick={countUp}\r\n      >+</button>\r\n      <button\r\n        onClick={countDown}\r\n      >-</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAIA,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMS,OAAO,GAAGA,CAAA,KAAM;IACpBD,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACnBC,QAAQ,CAAC,CAAAE,SAAS,CAAC,qBAAoB;MACrC,OAAOA,SAAS,GAAG,CAAC,CAAC,CAAC;IACxB,CAAE,CAAC;;IACHC,OAAO,CAACC,GAAG,CAACL,KAAK,CAAC;EACpB,CAAC;EACD,MAAMM,SAAS,GAAGA,CAAA,KAAM;IACtBL,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;EACrB,CAAC;EACD,oBACEL,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA;MAAAY,QAAA,GAAG,oDAAU,EAACP,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxBhB,OAAA;MACEiB,OAAO,EAAEV,OAAQ;MAAAK,QAAA,EAClB;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACXhB,OAAA;MACEiB,OAAO,EAAEN,SAAU;MAAAC,QAAA,EACpB;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACX,CAAC;AAEP,CAAC;AAACZ,EAAA,CAvBID,OAAO;AAAAe,EAAA,GAAPf,OAAO;AAyBb,eAAeA,OAAO;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}